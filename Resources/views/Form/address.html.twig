{% block address_widget %}
    {% set attr = attr|merge({'autocomplete':'false'}) %}

    {{ block('form_widget_compound') }}

    {% block map %}
        <div id="map_wrapper_{{ form.vars.id }}" style="display: none;">
            <div class="alert alert-warning" role="alert">
                {{ 'approximative'|trans({}, 'messages') }}
            </div>
            <div id="map_{{ form.vars.id }}" style="width:100%;"></div>
        </div>
    {% endblock %}

    <script type="text/javascript">
        (function () {
            let askPreciseCoordinates = '{{ ask_precise_coordinates }}';
            let map = document.getElementById('map_{{ form.vars.id }}');
            let mapWrapper = document.getElementById('map_wrapper_{{ form.vars.id }}');
            let inputs = {
                address1:    document.getElementById('{{ form.address1.vars.id }}'),
                address2:    document.getElementById('{{ form.address2.vars.id }}'),
                postalCode:  document.getElementById('{{ form.postalCode.vars.id }}'),
                city:        document.getElementById('{{ form.city.vars.id }}'),
                latitude:    document.getElementById('{{ form.latitude.vars.id }}'),
                longitude:   document.getElementById('{{ form.longitude.vars.id }}'),
                department:  document.getElementById('{{ form.department.vars.id }}'),
                region:      document.getElementById('{{ form.region.vars.id }}'),
                approximate: document.getElementById('{{ form.approximate.vars.id }}'),
            };

            function onPlaceChange(event) {
                hideMap();
                let isApproximate = (event.target === inputs.city);

                for (let field in inputs) {
                    if (isApproximate) {
                        if ('address1' === field) {
                            continue; {# Keep address on city update #}
                        }
                    }

                    inputs[field].value = handleComponentValue(field, event.target.autocompleteData);
                }

                handleApproximate(isApproximate, event.target.autocompleteData)
            }

            function handleApproximate(isApproximate) {
                inputs.approximate.value = isApproximate ? 1 : 0;

                if (isApproximate && askPreciseCoordinates) {
                    mapWrapper.style.display = isApproximate ? '' : 'none';
                    let latitude = inputs.latitude.value;
                    let longitude = inputs.longitude.value;
                    let position = {lat: parseFloat(latitude), lng: parseFloat(longitude)};

                    let gmap = new google.maps.Map(map, {
                        zoom: 13,
                        streetViewControl: false,
                        center: position,
                        mapTypeControl: false,
                    });

                    map.style.height = '250px';

                    let marker = new google.maps.Marker({
                        map: gmap,
                        draggable: true,
                        animation: google.maps.Animation.DROP,
                        position: position,
                    });

                    google.maps.event.addListener(marker, 'dragend', function () {
                        inputs.latitude.value = this.getPosition().lat();
                        inputs.longitude.value = this.getPosition().lng();
                        inputs.approximate.value = 0;
                    });
                }
            }

            function handleComponentValue(field, autocomplete) {
                let place = autocomplete.getPlace();
                let components = place.address_components;
                let value = '';

                console.log(components);

                switch (field) {
                    case 'address1':
                        let address1 = getComponentValue(['sublocality_level_1', 'premise'], 'short_name', components);

                        if (address1) {
                            value = address1;
                        } else {
                            value = getComponentValue('route', 'short_name', components);
                            let street_number = getComponentValue('street_number', 'short_name', components);

                            if (street_number) {
                                value = street_number + ', ' + value;
                            }
                        }
                        return value;
                    case 'postalCode':
                        return getComponentValue('postal_code', 'short_name', components);
                    case 'city':
                        return getComponentValue(['locality', 'postal_town'], 'short_name', components);
                    case 'department':
                        return getComponentValue('administrative_area_level_2', 'long_name', components);
                    case 'region':
                        return getComponentValue('administrative_area_level_1', 'long_name', components);
                    case 'latitude':
                        return place.geometry ? place.geometry.location.lat() : 0;
                    case 'longitude':
                        return place.geometry ? place.geometry.location.lng() : 0;
                }

                return value;
            }

            function getComponentValue(types, format, components) {
                if (components) {
                    for (let i = 0; i < components.length; i++) {
                        if (typeof types === 'string') {
                            types = [types];
                        }
                        for (let n = 0; n < types.length; n++) {
                            for (let t = 0; t < components[i].types.length; t++) {
                                if (components[i].types[t] === types[n]) {
                                    return components[i][format];
                                }
                            }

                        }
                    }
                }

                return '';
            }

            function handleKeys(event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                }
            }

            function reset() {
                for (let field in inputs) {
                    inputs[field].value = ''
                }

                hideMap();
            }

            function hideMap()
            {
                mapWrapper.style.display = 'none';
            }

            let selectFirstOnEnter = function (input) {
                let _addEventListener = (input.addEventListener) ? input.addEventListener : input.attachEvent;

                function addEventListenerWrapper(type, listener) {
                    if (type == 'keydown') {
                        let origListener = listener;
                        listener = function (event) {
                            let addressList = document.querySelectorAll('.pac-item-selected').length > 0;
                            if (event.which == 13 && !addressList) {
                                origListener.apply(input, [new KeyboardEvent('keypress', {keyCode: 40})]);
                            }
                            origListener.apply(input, [event]);
                        };
                    }
                    _addEventListener.apply(input, [type, listener]);
                }

                if (input.addEventListener) {
                    input.addEventListener = addEventListenerWrapper;
                } else if (input.attachEvent) {
                    input.attachEvent = addEventListenerWrapper;
                }
            };

            function addAutocompleteEventListeners(element)
            {
                element.addEventListener('place_changed', onPlaceChange);
                element.addEventListener('keypress', handleKeys);
                element.addEventListener('reset', reset);
                selectFirstOnEnter(element);
            }

            addAutocompleteEventListeners(inputs.address1);
            addAutocompleteEventListeners(inputs.city);
        })();
    </script>
{% endblock %}
