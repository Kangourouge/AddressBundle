{% block address_widget %}
    {% spaceless %}
        {% set attr = attr|merge({'autocomplete':'false'}) %}

        {{ block('form_widget_compound') }}

        <div style="display: none;">
            <p class="text text-warning address-approximate">{{ 'approximative'|trans() }}</p>
            <div id="map_{{ form.vars.id }}" style="width:100%;"></div>
        </div>

        <script type="text/javascript">
            (function () {
                var address = document.getElementById('{{ form.vars.id }}');
                var map;
                var fields = {
                    address1:    '{{ form.address1.vars.id }}',
                    address2:    '{{ form.address2.vars.id }}',
                    postalCode:  '{{ form.postalCode.vars.id }}',
                    city:        '{{ form.city.vars.id }}',
                    latitude:    '{{ form.latitude.vars.id }}',
                    longitude:   '{{ form.longitude.vars.id }}',
                    department:  '{{ form.department.vars.id }}',
                    region:      '{{ form.region.vars.id }}',
                    approximate: '{{ form.approximate.vars.id }}',
                };

                document.getElementById(fields.address1).addEventListener('place_changed', onPlaceChange);
                document.getElementById(fields.address1).addEventListener('keyDown', handleKeys);
                document.getElementById(fields.address1).addEventListener('reset', reset);
                document.getElementById(fields.postalCode).addEventListener('place_changed', onPlaceChange);
                document.getElementById(fields.postalCode).addEventListener('keyDown', handleKeys);
                document.getElementById(fields.postalCode).addEventListener('reset', reset);

                function onPlaceChange(event) {
                    var isApproximate = event.target.id === fields.postalCode;

                    for (var field in fields) {
                        if (isApproximate) {
                            if ('address1' === field) {
                                continue; {# Keep address on postalCode update #}
                            }
                        }

                        document.getElementById(fields[field]).value = handleComponentValue(field, event.target.autocompleteData, isApproximate);
                    }

                    handleApproximate(isApproximate, event.target.autocompleteData)
                }

                function handleApproximate(isApproximate) {
                    document.getElementById(fields.approximate).value = isApproximate;
                    address.nextElementSibling.style.display = isApproximate ? '' : 'none';

                    if (isApproximate) {
                        var mapEl = document.getElementById('map_{{ form.vars.id }}');
                        var latitude = document.getElementById(fields.latitude).value;
                        var longitude = document.getElementById(fields.longitude).value;

                        map = new google.maps.Map(mapEl, {
                            zoom: 13,
                            center: {lat: parseFloat(latitude), lng: parseFloat(longitude)}
                        });

                        mapEl.style.height = '200px';

                        marker = new google.maps.Marker({
                            map: map,
                            draggable: true,
                            animation: google.maps.Animation.DROP,
                            position: {lat: parseFloat(latitude), lng: parseFloat(longitude)}
                        });

                        google.maps.event.addListener(marker, 'dragend', function (event) {
                            document.getElementById(fields.latitude).value = this.getPosition().lat();
                            document.getElementById(fields.longitude).value = this.getPosition().lng();
                            approximate.value = 0;
                        });
                    }
                }

                function handleComponentValue(field, autocomplete, isApproximate) {
                    var place = autocomplete.getPlace();
                    var components = place.address_components;
                    var value = '';

                    switch (field) {
                        case 'address1':
                            sublocality_level_1 = extractComponentValue('sublocality_level_1', 'short_name', components);
                            if (sublocality_level_1) {
                                value = sublocality_level_1;
                            } else {
                                value = extractComponentValue('route', 'short_name', components);
                                street_number = extractComponentValue('street_number', 'short_name', components);

                                if (street_number) {
                                    value = street_number + ', ' + value;
                                }
                            }
                            return value;
                        case 'postalCode':
                            return extractComponentValue('postal_code', 'short_name', components);
                        case 'city':
                            return extractComponentValue('locality', 'short_name', components);
                        case 'department':
                            return extractComponentValue('administrative_area_level_2', 'long_name', components);
                        case 'region':
                            return extractComponentValue('administrative_area_level_1', 'long_name', components);
                        case 'latitude':
                            return place.geometry ? place.geometry.location.lat() : 0;
                        case 'longitude':
                            return place.geometry ? place.geometry.location.lng() : 0;
                    }

                    return value;
                }

                function extractComponentValue(addressType, addressFormat, components) {
                    if (components) {
                        for (var i = 0; i < components.length; i++) {
                            if (components[i].types[0] === addressType) {
                                return components[i][addressFormat];
                            }
                        }
                    }

                    return '';
                }

                function handleKeys(event) {
                    if (event.keyCode === 13) { {# Ignore ENTER press #}
                        event.preventDefault();
                    }
                }

                function reset(event) {
                    for (var field in fields) {
                        document.getElementById(fields[field]).value = ''
                    }
                }
            })();
        </script>
    {% endspaceless %}
{% endblock %}
