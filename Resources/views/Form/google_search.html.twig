{% block google_search_widget %}
    {% set attr = attr|merge({autocomplete:'off'}) %}

    {{ block('form_widget') }}

    <script type="text/javascript">
        (function(){
            var inputs = {
                location: document.getElementById('{{ form.location.vars.id }}'),
                place: document.getElementById('{{ form.place.vars.id }}'),
            };

            function onPlaceChange(event) {
                inputs.place.value = prepareData(event.target.autocompleteData.getPlace());
            }

            function prepareData(data) {
                var place = {
                    address_components: data.address_components,
                    formatted_address: data.formatted_address,
                    address_components: data.address_components,
                    address_components: data.address_components,
                    address_components: data.address_components,
                    coordinate: {
                        latitude: data.geometry ? data.geometry.location.lat() : 0,
                        longitude: data.geometry ? data.geometry.location.lng() : 0
                    },
                    types: data.types,
                    vicinity: data.vicinity
                };

                return JSON.stringify(place);
            }

            function putFirstPlace() {
                var results = document.getElementsByClassName('pac-item');
                if (results === undefined || results.length === 0) {
                    return false;
                }
                var firstResult = results[0].childNodes;
                var placeName = firstResult[1].textContent;
                var placeAddress = firstResult[2].textContent;
                var geocoder = new google.maps.Geocoder();

                geocoder.geocode({'address': placeName + ' ' + placeAddress}, function(results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            inputs.location.value = results[0].formatted_address;
                            inputs.place.value = prepareData(results[0]);
                        }

                        return results;
                    }
                });

                return false;
            }

            function handleKeys(event) {
                if (event.keyCode === 13) {
                    event.preventDefault();

                    return putFirstPlace();
                }

                reset();
            }

            function reset(event) {
                inputs.place.value = '';
            }

            inputs.location.addEventListener('place_changed', onPlaceChange);
            inputs.location.addEventListener('keydown', handleKeys);
            inputs.location.addEventListener('keyup', handleKeys);
            inputs.location.addEventListener('reset', reset);
        })();
    </script>
{% endblock %}
